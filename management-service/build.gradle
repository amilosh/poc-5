plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.3'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'checkstyle'
    id 'jacoco'
}

group = 'pl.amilosh'
version = '1'

java {
	sourceCompatibility = '21'
}

repositories {
	mavenCentral()
}

ext {
	mapstructVersion = '1.5.5.Final'
	lombokVersion = '1.18.30'
	lombokMapstructBindingVersion = '0.2.0'
	springdocOpenapiVersion = '2.4.0'
	logbackJson = "0.1.5"
	checkstyleToolVersion = "10.14.2"
    jacocoToolVersion = "0.8.11"
    hibernateJpamodelgenVersion = "6.4.4.Final"
    awsS3Version = "1.12.692"
}

dependencies {
	annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
	annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"
    annotationProcessor "org.hibernate.orm:hibernate-jpamodelgen:${hibernateJpamodelgenVersion}"

	compileOnly "org.projectlombok:lombok:${lombokVersion}"
    compileOnly "org.hibernate.orm:hibernate-jpamodelgen:${hibernateJpamodelgenVersion}"

	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.flywaydb:flyway-core'
	implementation "org.mapstruct:mapstruct:${mapstructVersion}"
	implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocOpenapiVersion}"
	implementation "ch.qos.logback.contrib:logback-json-classic:$logbackJson"
	implementation "ch.qos.logback.contrib:logback-jackson:$logbackJson"
    implementation "com.amazonaws:aws-java-sdk-s3:$awsS3Version"
    implementation 'javax.xml.bind:jaxb-api:2.3.1'

	runtimeOnly 'org.postgresql:postgresql'

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

checkstyle {
    toolVersion = "$checkstyleToolVersion"
    checkstyleMain.enabled = false
    checkstyleTest.enabled = false
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "$jacocoToolVersion"
}

// files to exclude from jacocoTestReport
def path = 'pl/amilosh/managementservice'
def excludedTests = [
    path + '/config/**',
    path + '/exception/**'
]

jacocoTestReport {
    dependsOn test
    // exclude files from jacocoTestReport
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude:
                excludedTests
            )
        }))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = false
            limit {
                minimum = 0.5
            }
        }

        rule {
            enabled = true
            element = 'CLASS'
            includes = ['pl.amilosh.managementservice.service.impl.TestServiceImpl']

            limit {
                counter = 'LINE'
                minimum = 0.5
            }
        }
    }
}